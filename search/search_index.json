{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Your Name's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Arya Bharti</li> <li>Reviewer: Hamsini Tankala</li> </ul>"},{"location":"tutorials/go-setup/#go-devcontainer-setup-tutorial","title":"Go DevContainer Setup Tutorial","text":""},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before we dive into this GO Tutorial, make sure you have:</p> <ul> <li>A GitHub account: If you don\u2019t have one yet, sign up at GitHub.</li> <li>Git installed: Install Git if you don\u2019t already have it.</li> <li>Visual Studio Code (VS Code): Download and install it from here.</li> <li>Docker installed: Required to run the dev container. Get Docker here.</li> <li>Command-line basics: Your command-line knowledge will serve you well here. If you need go back to our previous tutorials in class that over the CLI commands!</li> </ul>"},{"location":"tutorials/go-setup/#part-1-project-setup-creating-the-repository","title":"Part 1. Project Setup: Creating the Repository","text":""},{"location":"tutorials/go-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1. Create a Local Directory and Initialize Git","text":"<p>(A) Open your terminal or command prompt.</p> <p>(B) Create a new directory for your project. (Note: Of course, if you'd like to organize this tutorial somewhere else on your machine, go ahead and change into that parent directory first. By default, this will be in your user's home directory):</p> <pre><code>mkdir go-tutorial-426\ncd  go-tutorial-426\n</code></pre> <p>(C) Initialize a new Git repository: <pre><code>git init\n</code></pre> (D) Create a README file: <pre><code>echo \"# Go Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/go-setup/#part-2-setting-up-the-devcontainer","title":"Part 2: Setting Up the DevContainer","text":""},{"location":"tutorials/go-setup/#step-1-add-development-container-configuration","title":"Step 1. Add Development Container Configuration","text":"<p>(A) Create a .devcontainer directory: <pre><code>mkdir .devcontainer\ntouch .devcontainer/devcontainer.json\n</code></pre> (B) Open project in VSCode: <pre><code>code . \n</code></pre></p> <p>(C) Add the following content to devcontainer.json: <pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"golang.go\"]\n    }\n  },\n  \"settings\": {\n    \"go.gopath\": \"/go\"\n  }\n}\n</code></pre></p> <p>What is a DevContainer?</p> <p>A DevContainer is a development environment defined by configuration files, enabling a consistent and isolated workspace. It uses Docker to manage the container.</p>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2. Reopen the Project in a VSCode Dev Container","text":"<p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option. This may take a few minutes while the image is downloaded and the requirements are installed.</p> <p>Once your dev container setup completes, close the current terminal tab (trash can), open a new terminal pane within VSCode, and try running <code>go version</code> to see your dev container is running a recent version of Go without much effort! </p>"},{"location":"tutorials/go-setup/#part-3-writing-a-basic-go-program","title":"Part 3: Writing a Basic Go Program","text":""},{"location":"tutorials/go-setup/#step-1-create-the-go-file","title":"Step 1. Create the Go File","text":"<p>(A) Create a src directory and add a main.go file: <pre><code>mkdir src\ncd src\ntouch main.go\n</code></pre></p> <p>(B) Add the following code to main.go: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></p>"},{"location":"tutorials/go-setup/#part-4-running-and-building-the-go-program","title":"Part 4: Running and Building the Go Program","text":""},{"location":"tutorials/go-setup/#step-1-run-the-program","title":"Step 1. Run the Program","text":"<p>(A) Verify the Go installation in the container: <pre><code>go version\n</code></pre> (B) Initialize a Go module: <pre><code>go mod init go-tutorial-426\n</code></pre> (C) Run the program: <pre><code>go run main.go \n</code></pre> \"//go src/run main.go\"</p> <p>Expected Output</p> <p>When you run the program, you should see the following output in your terminal: <pre><code>Hello COMP423\n</code></pre></p>"}]}